c
nc
n
@like.save
c
b
create
comment
comment_id
n
user_id
text
param
text
create
Like
	@like
c
@comment
new
create
replies
  @reply 
n
c
params
reply
   @reply
n
c
id
params
Comment
 @comment
n
 @comment
c
post '/likes', params: {text: "heloo"}, headers: {Authorization: token }
post '/likes', params: params, headers: {Authorization: token }
comment
post
params
subject
c
post '/likes', params: params, headers: {Authorization: token }
c
post :create
post :create, headers: {Authorization: token }
post :create, params: {}, headers: {Authorization: token }
post :create, params: params, headers: {Authorization: token }
token
post '/likes', {params: params, headers: {'Authorization' => token }}
post '/likes', {params: params, headers: {"Authorization" => token }}
post '/likes', {params: params, headers: {Authorization: token }}
post '/likes', headers: {Authorization: token }
post '/likes', params: params
post '/likes'
post '/likes', params: params, headers: {Authorization: token }
params
post '/likes', params: params, headers: {Authorization: token }
c
params
n
@current_user.id
@current_user
@like
n
c
 post_id:params[:post_id]
 post_id:params[:post_id],
	comment_id:params[:comment_id])
c
	@like
post_url
post_id
id
:comment_id
params
 comment_url
comment_id
c
self
post_id
like
Lik
text
:ffff
:params
:text
text
@current_user.id
user_id:
param
@like
like
@like
c
@comment
n
params
c
@commentc
@comment
n
c
params
c
params
c
@user
c
 subject do
describe "POST #create" do
POST #creat
POST #create
c
context "With valid params" do
it "should returns created" do
c
User.find(1)
params
c
id
user
c
user
id
c
	params.permit(:user_name, :email, :password, :profile)
user_name
params.permit
permit
params
user_params
c
self
user_params
update
user_param
update(user_params)
@user
c
UserMailer.welcome_message.deliver_now
c
UserMailer.welcome_message.deliver_now
c
mail to: "gajendrarajput@yopmail.com" ,subject:'inform'
c
users
c
user_params
c
n
self
n
nn
params
c
object
obj.object.created_at
obj.object.id
obj.object.name
obj.object
obj.methods
self
obj.created_at
obj
params
c
objc
obj.post
obj
obj.id
obj
obj.created_at
created_at
obj
obj.created_at
obj
c
@post.class
@post
c
@post
c
@like
c
post_params
c
post_params
c
@post = @current_user.posts.create(post_params)
c
params[:description]
params
c
@current_user
c
@decoded = jwt_decode(header)
header = header.split(' ').last
header = request.headers['Authorization']
c
@current_user
n
@decoded
n
header
n
header
n
@current_user = User.find(@decoded[:user_id])
@decoded = jwt_decode(header)
header = header.split(' ').last
header
header = request.headers['Authorization']
c
@user.save
@user = User.new(user_params)
User.new
user_params
c
post.save
post = Post.new(post_params.merge(user_id: @current_user.id))
c
post_params.merge(user_id: @current_user.id)
c
@current_user
c
post.save!
post.save
post = Post.new(post_params)
post_params
c
post_params
c
jwt_decode(header)
n
c
@current_user
n
jwt_decode(header)
header
n
header = header.split(' ').last if header
n
header = request.headers['Authorization']
c
User.new(user_params)
user_params
User.new
USer.new
User.new(user_params)
